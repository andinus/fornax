#+title: Fornax
#+subtitle: Collection of tools to visualize Path Finding Algorithms
#+export_file_name: index
#+setupfile: ~/.emacs.d/org-templates/projects.org

| Website         | https://andinus.unfla.me/projects/fornax |
| Source          | https://git.unfla.me/fornax              |
| GitHub (mirror) | https://github.com/andinus/fornax        |

This collection includes:
- ~fornax~: Program that parses /Fornax Format/ and outputs video solution.
- Algorithms: Various algorithms solved in several programming
  languages.

* Documentation

Fornax parses /Fornax format/, generates a ~PNG~ for each iteration which is
later converted to a slideshow with ~ffmpeg~.

- Solved paths are highlighted if the iteration is preceded by ~|~.
- Illegal paths are highlighted if the iteration is preceded by ~!~.

* Fornax Format

Fornax format is an intermediate output file generated after solving the
maze. Algorithms must output the solution in this format.

#+begin_src
rows:<number of rows> cols:<number of columns>

...iterations
#+end_src

~...iterations~ is to be replaced by the resulting grid in each iteration
that is to be included in the final video. Since the number of rows and
columns is known, the whole grid should be printed in a single line.

- Every iteration should be separated by a newline.

- If the iteration cells is not equal to ~rows * columns~ or ~(rows *
  columns) + 1~ then it may be ignored by the program that parses the
  file.

- Solved iteration can be preceded by ~|~ character.

- Iteration that tries to walk on a blocked path can be preceded by ~!~
  character.

** Grids

A grid is printed for every iteration. Grids are composed of cells.

| Cell             | Symbol |
|------------------+--------|
| Path             | ~.~      |
| Blocked          | ~#~      |
|------------------+--------|
| Visited          | ~-~      |
| Current Position | ~@~      |
| Destination      | ~$~      |

* Project Structure

- Algorithms are located in ~algorithms/~ directory, sub-directory needs
  to be created for programming languages which will hold the actual
  source.
